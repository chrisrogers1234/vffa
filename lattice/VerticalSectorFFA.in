Option, ECHO=TRUE;
//////////////////////////////////////////////////////////////////////////////
// Input file for single bunch tracking through VERTICAL FFA ring          //
//////////////////////////////////////////////////////////////////////////////
Title,string="Small ring using OPAL code";
Option, ASCIIDUMP=FALSE;
Option, ENABLEHDF5=TRUE;
OPTION, PSDUMPFREQ=100000;
Option, VERSION=10900;
Option, SPTDUMPFREQ=1;
Option, STATDUMPFREQ=100000;

////////// CONSTANTS ////////////////////////////////////

// Note to self ... 
// * "Length" is total length of the sector magnet
// * each coil has centre length = Length/n * 0.8

REAL DEGREE=PI/180.;
REAL MM=1000.;
REAL C_LIGHT=0.3; // m/ns

////////// MODULES ///////////////////////
BOOL DO_MAGNET_FIELD_MAPS=__do_magnet_field_maps__;
BOOL DO_BUMP_MAGNETS=__do_bump__; // lone coil

////////// RING  ///////////////
REAL R0=__radius__;
REAL E0=__energy__;
REAL P_MASS=938.2720813;
REAL P0=((E0+P_MASS)^2-P_MASS^2)^0.5;
REAL N_CELLS=__n_cells__;
REAL RMIN=R0-1.0;
REAL RMAX=R0+1.0;
REAL FFA_CELL_LENGTH=2*PI/N_CELLS;
REAL HALF_CELL_LENGTH=__half_cell_length__;

////////// TRACKING ///////////////
REAL STEP_SIZE=__step_size__; // m
REAL N_TURNS=__n_turns__;
REAL BEAM_PHI_INIT=__beam_phi_init__;
REAL N_PARTICLES=__n_particles__;

////////// MAIN MAGNETS/////////
REAL N_SECTORS=__n_sectors__;
REAL OCCUPANCY=__occupancy__; // each coil centre length = OCCUPANCY*F_LENGTH/N_SECTORS
REAL F_LENGTH=__f_length__; // total length of all coils including occupancy is F_LENGTH
REAL D_LENGTH=__d_length__;
REAL F_BEND_ANGLE=__f_bend_angle__; // 
REAL D_BEND_ANGLE=__d_bend_angle__;
REAL M_INDEX=__m_index__;
REAL F_END_LENGTH=__f_end_length__;
REAL D_END_LENGTH=__d_end_length__;
REAL BF=__bf__;
REAL BD=__bd__;
REAL MAX_HORIZONTAL_POWER=__max_x_power__;
REAL NEG_EXTENT=__neg_extent__;
REAL POS_EXTENT=__pos_extent__;
REAL BB_LENGTH=__bb_length__;
REAL MAG_WIDTH=__magnet_width__;

REAL D_OFFSET=__d_offset__;
REAL F_OFFSET=__f_offset__;

///////////// BUMP MAGNETS ////////////////////
REAL BUMP_ORDER=0;

REAL SEPTUM_LENGTH=__septum_length__; //0.15; // m
REAL SEPTUM_FRINGE_LENGTH=__septum_fringe__*SEPTUM_LENGTH; // 0.1// m
REAL SEPTUM_WIDTH=__septum_width__; // 0.5// m
REAL SEPTUM_FIELD=__septum_field__; // [T]
REAL SEPTUM_PHI=__septum_phi__; // fraction of cell length
REAL SEPTUM_DR=__septum_dr__; // radial position relative to R0
REAL SEPTUM_ROT=0.25; // rotation relative to azimuthal direction
REAL SEPTUM_ORDER=BUMP_ORDER;

// XXX_PHI is the azimuthal position of the centre
// XXX_DPHI is a tilt of the element relative to the centre
// XXX_DR is a radial offset of the element

REAL FOIL_PROBE_PHI=__foil_probe_phi__; // [fraction of cell length]
REAL BUMP_4_PROBE_PHI=__bump_4_probe_phi__; // [fraction of cell length]

REAL H_BUMP_LENGTH=0.1;
REAL H_BUMP_FRINGE_LENGTH=0.01;
REAL H_BUMP_ORDER=BUMP_ORDER;
REAL H_BUMP_DR=-0.15;
REAL H_BUMP_DPHI=-0.25;

REAL H_BUMP_1_PHI=__h_bump_1_phi__; //1.43;
REAL H_BUMP_1_DPHI=__h_bump_1_dphi__;
REAL H_BUMP_1_FIELD=__h_bump_1_field__;
REAL H_BUMP_2_PHI=__h_bump_2_phi__;
REAL H_BUMP_2_DPHI=__h_bump_2_dphi__;
REAL H_BUMP_2_FIELD=__h_bump_2_field__;
REAL H_BUMP_3_PHI=__h_bump_3_phi__;
REAL H_BUMP_3_DPHI=__h_bump_3_dphi__;
REAL H_BUMP_3_FIELD=__h_bump_3_field__;
REAL H_BUMP_4_PHI=__h_bump_4_phi__;
REAL H_BUMP_4_DPHI=__h_bump_4_dphi__;
REAL H_BUMP_4_FIELD=__h_bump_4_field__;
REAL H_BUMP_5_PHI=__h_bump_5_phi__;
REAL H_BUMP_5_DPHI=__h_bump_5_dphi__;
REAL H_BUMP_5_FIELD=__h_bump_5_field__;

REAL V_BUMP_LENGTH=0.1;
REAL V_BUMP_FRINGE_LENGTH=0.01;
REAL V_BUMP_ORDER=BUMP_ORDER;
REAL V_BUMP_DR=-0.15;

REAL V_BUMP_1_PHI=__v_bump_1_phi__;
REAL V_BUMP_1_DPHI=__v_bump_1_dphi__;
REAL V_BUMP_1_FIELD=__v_bump_1_field__;
REAL V_BUMP_2_PHI=__v_bump_2_phi__;
REAL V_BUMP_2_DPHI=__v_bump_2_dphi__;
REAL V_BUMP_2_FIELD=__v_bump_2_field__;
REAL V_BUMP_3_PHI=__v_bump_3_phi__;
REAL V_BUMP_3_DPHI=__v_bump_3_dphi__;
REAL V_BUMP_3_FIELD=__v_bump_3_field__;
REAL V_BUMP_4_PHI=__v_bump_4_phi__;
REAL V_BUMP_4_DPHI=__v_bump_4_dphi__;
REAL V_BUMP_4_FIELD=__v_bump_4_field__;
REAL V_BUMP_5_PHI=__v_bump_5_phi__;
REAL V_BUMP_5_DPHI=__v_bump_5_dphi__;
REAL V_BUMP_5_FIELD=__v_bump_5_field__;

//////////// FIELD MAPS ///////////////
REAL MAP_C_X_MIN=__cartesian_x_min__;
REAL MAP_C_DX=__cartesian_dx__; // 1001 steps
REAL MAP_C_Y_MIN=__cartesian_y_min__;
REAL MAP_C_DY=__cartesian_dy__; // 1001 steps

//////////// END VARIABLE DEFINITIONS //////////////////

//////////// MACROS AND GLOBALS /////////////
BUILD_PROBE(NAME, ANGLE): MACRO {
    //NAME: PROBE, xstart=RMIN*1000*cos(ANGLE),  xend=RMAX*1000*cos(ANGLE),
    //             ystart=RMIN*1000*sin(ANGLE),  yend=RMAX*1000*sin(ANGLE);
    NAME: OUTPUTPLANE, centre_x=R0*cos(ANGLE+1e-12), centre_y=R0*sin(ANGLE+1e-12), centre_z=0.,
                       normal_x=sin(ANGLE), normal_y=-cos(ANGLE), normal_z=0., width=1,
                       REFERENCE_ALIGNMENT_PARTICLE=-1, ALGORITHM="EXTRAPOLATION";
}

start: LOCAL_CARTESIAN_OFFSET,
                end_position_x=R0,
                end_position_y=R0,
                end_normal_x=-sin(360/40*degree),
                end_normal_y=-cos(360/40*degree); 

null: LOCAL_CARTESIAN_OFFSET,
                end_position_x=0., end_position_y=0.,
                end_normal_x=1.0, end_normal_y=0.;


//////////////////////////// CELL DRIFT /////////////////////////////////

quarter_cell_drift: LOCAL_CARTESIAN_OFFSET,
                end_position_x=HALF_CELL_LENGTH/2.,
                end_position_y=0,
                end_normal_x=1,
                end_normal_y=0;

half_cell_rotate: LOCAL_CARTESIAN_OFFSET,
                end_position_x=0.,
                end_position_y=0,
                end_normal_x=COS(2*PI/N_CELLS/2),
                end_normal_y=-SIN(2*PI/N_CELLS/2);

//////////// MAIN MAGNETS /////////////////////
REAL F_CENTRE_LENGTH=F_LENGTH/N_SECTORS*OCCUPANCY;
REAL D_CENTRE_LENGTH=D_LENGTH/N_SECTORS*OCCUPANCY;

magnetF: VERTICALFFAMAGNET,
          B0=BF,
          FIELD_INDEX=M_INDEX,
          MAX_HORIZONTAL_POWER=MAX_HORIZONTAL_POWER,
          END_LENGTH=F_END_LENGTH,
          CENTRE_LENGTH=F_CENTRE_LENGTH*2,
          HEIGHT_NEG_EXTENT=NEG_EXTENT,
          HEIGHT_POS_EXTENT=POS_EXTENT,
          WIDTH=MAG_WIDTH,
          BB_LENGTH=BB_LENGTH;

magnetD: VERTICALFFAMAGNET,
          B0=BD,
          FIELD_INDEX=M_INDEX,
          MAX_HORIZONTAL_POWER=MAX_HORIZONTAL_POWER,
          END_LENGTH=D_END_LENGTH,
          CENTRE_LENGTH=D_CENTRE_LENGTH*2,
          HEIGHT_NEG_EXTENT=NEG_EXTENT,
          HEIGHT_POS_EXTENT=POS_EXTENT,
          WIDTH=MAG_WIDTH,
          BB_LENGTH=BB_LENGTH;

/////////// Transform from point P0 to start of magnet BB with given centre //////////
OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out): MACRO {
    x_out = delta_x-bb_length*cos(tilt)/2.;
}

OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out): MACRO {
    y_out = delta_y-bb_length*sin(tilt)/2.;
}

NORM_X(delta_x, delta_y, tilt, bb_length, tx_out): MACRO {
    tx_out = cos(tilt)/2.;
}

NORM_Y(delta_x, delta_y, tilt, bb_length, ty_out): MACRO {
    ty_out = sin(tilt)/2.;
}

MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out): MACRO {
    OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out);
    OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out);
    NORM_X  (delta_x, delta_y, tilt, bb_length, tx_out);
    NORM_Y  (delta_x, delta_y, tilt, bb_length, ty_out);
}

BUILD_CENTRE_OFFSET(name, delta_x, delta_y, tilt, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;

    MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}


// place an element on the circle having radius R at azimuthal angle phi
// offset from the circle by delta r and then tilt by delta phi
BUILD_AZIMUTHAL_OFFSET(name, radius, phi, delta_r, delta_phi, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;
    //REAL cell_phi=2*PI/N_CELLS/2;

    // delta_x/y in the coordinate system of the ring
    REAL delta_x = radius*sin(phi)+delta_r*sin(phi);
    REAL delta_y = -radius*(1-cos(phi))+delta_r*cos(phi);

    MAGNET_OFFSET(delta_x, delta_y, -(phi+delta_phi), bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}


/////////// Transform from end of magnet BB back to the point P0 //////////

R_OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out): MACRO {
    x_out =-delta_y*sin(tilt)-delta_x*cos(tilt)-bb_length/2.;
}

R_OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out): MACRO {
    y_out = -delta_y*cos(tilt)+delta_x*sin(tilt);
}

R_NORM_X(delta_x, delta_y, tilt, bb_length, tx_out): MACRO {
    tx_out = cos(tilt)/2.;
}

R_NORM_Y(delta_x, delta_y, tilt, bb_length, ty_out): MACRO {
    ty_out = -sin(tilt)/2.
}

REVERSE_MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out): MACRO {
    R_OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out);
    R_OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out);
    R_NORM_X  (delta_x, delta_y, tilt, bb_length, tx_out);
    R_NORM_Y  (delta_x, delta_y, tilt, bb_length, ty_out);
}

// cartesian offset, including a bounding box
// undoes a placement like BUILD_CENTRE_OFFSET; rectangular element
BUILD_CENTRE_REVERSE_OFFSET(name, delta_x, delta_y, tilt, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;

    REVERSE_MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}

// place an element on the circle having radius R at azimuthal angle phi
// offset from the circle by delta r and then tilt by delta phi
BUILD_AZIMUTHAL_REVERSE_OFFSET(name, radius, phi, delta_r, delta_phi, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;
    //REAL cell_phi=2*PI/N_CELLS/2;

    // delta_x/y in the coordinate system of the ring
    REAL delta_x = radius*sin(phi)+delta_r*sin(phi);
    REAL delta_y = -radius*(1-cos(phi))+delta_r*cos(phi);

    REVERSE_MAGNET_OFFSET(delta_x, delta_y, -(phi+delta_phi), bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}

//////////////////////// AZIMUTHAL MODE /////////////////////////////////

azimuthal_offset: LOCAL_CARTESIAN_OFFSET,
            end_position_x=0,
            end_position_y=0,
            end_normal_x=cos(FFA_CELL_LENGTH/4),
            end_normal_y=sin(FFA_CELL_LENGTH/4); 

segment_offset: LOCAL_CARTESIAN_OFFSET,
            end_position_x=0,
            end_position_y=0,
            end_normal_x=cos(FFA_CELL_LENGTH/4),
            end_normal_y=-sin(FFA_CELL_LENGTH/4);

azimuthal: Line = (azimuthal_offset);
segment: Line = (segment_offset);

///////////////////////// PLACEMENTS FOR MAGNET VD //////////////////////

REAL D_BB=BB_LENGTH;
REAL D_RADIUS=D_LENGTH/(D_BEND_ANGLE*DEGREE);
REAL D_PHI=D_BEND_ANGLE*DEGREE/N_SECTORS;

VALUE, VALUE={D_RADIUS, D_PHI};

BUILD_AZIMUTHAL_REVERSE_OFFSET(d_magnet_half_offset_back, D_RADIUS, DEGREE*D_BEND_ANGLE/2, 0, 0, 0);
BUILD_AZIMUTHAL_OFFSET(d_coil_half_offset, D_RADIUS, D_PHI/2, 0, 0, D_BB);
BUILD_AZIMUTHAL_REVERSE_OFFSET(d_coil_half_offset_back, D_RADIUS, D_PHI/2, 0, 0, D_BB);
BUILD_AZIMUTHAL_OFFSET(d_coil_full_offset, D_RADIUS, D_PHI, 0, 0, 0);

d_off_line: LOCAL_CARTESIAN_OFFSET,
        end_position_x=0,
        end_position_y=D_OFFSET,
        end_normal_x=1,
        end_normal_y=0;

d_back_to_line: LOCAL_CARTESIAN_OFFSET,
        end_position_x=0,
        end_position_y=-D_OFFSET,
        end_normal_x=1,
        end_normal_y=0;

///////////////////////////// D_LINE ///////////////////////////////

// d_offset is transverse offset off centre line; followed by azimuthal offset
// to magnet start; followed by individual coil offsets and placement, followed
// by azimuthal offset back to magnet centre and then offset back to centre line
d_line: Line = (d_off_line, d_magnet_half_offset_back
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_coil_half_offset, magnetD, d_coil_half_offset_back, d_coil_full_offset
                , d_magnet_half_offset_back, d_back_to_line);

///////////////////////// PLACEMENTS FOR MAGNET VF //////////////////////

REAL F_BB=BB_LENGTH;
REAL F_RADIUS=F_LENGTH/(F_BEND_ANGLE*DEGREE);
REAL F_PHI=F_BEND_ANGLE*DEGREE/N_SECTORS;

VALUE, VALUE={F_RADIUS, F_PHI};

BUILD_AZIMUTHAL_REVERSE_OFFSET(f_magnet_half_offset_back, F_RADIUS, DEGREE*F_BEND_ANGLE/2, 0, 0, 0);
BUILD_AZIMUTHAL_OFFSET(f_coil_half_offset, F_RADIUS, F_PHI/2, 0, 0, F_BB);
BUILD_AZIMUTHAL_REVERSE_OFFSET(f_coil_half_offset_back, F_RADIUS, F_PHI/2, 0, 0, F_BB);
BUILD_AZIMUTHAL_OFFSET(f_coil_full_offset, F_RADIUS, F_PHI, 0, 0, 0);

f_off_line: LOCAL_CARTESIAN_OFFSET,
        end_position_x=0,
        end_position_y=F_OFFSET,
        end_normal_x=1,
        end_normal_y=0;

f_back_to_line: LOCAL_CARTESIAN_OFFSET,
        end_position_x=0,
        end_position_y=-F_OFFSET,
        end_normal_x=1,
        end_normal_y=0;


///////////////////////////// F_LINE ///////////////////////////////

// as per d_line
f_line: Line = (f_off_line, f_magnet_half_offset_back
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_coil_half_offset, magnetF, f_coil_half_offset_back, f_coil_full_offset
                , f_magnet_half_offset_back, f_back_to_line);

/////////////////////// BUMP /////////////////////////////////

BUILD_PROBE(FoilProbe, FOIL_PROBE_PHI*FFA_CELL_LENGTH);
BUILD_PROBE(Bump4Probe, BUMP_4_PROBE_PHI*FFA_CELL_LENGTH);

magnetSeptum: MultipoleT, L=SEPTUM_LENGTH,
              RFRINGE=SEPTUM_FRINGE_LENGTH,
              LFRINGE=SEPTUM_FRINGE_LENGTH,
              HAPERT=SEPTUM_WIDTH,
              VAPERT=2.0,
              ANGLE=0.0,
              TP={ SEPTUM_FIELD },
              BBLENGTH=0.,
              MAXFORDER=SEPTUM_ORDER,
              MAXXORDER=SEPTUM_ORDER,
              VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(septum_offset, R0, SEPTUM_PHI*FFA_CELL_LENGTH, SEPTUM_DR, 2*PI*SEPTUM_ROT, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(septum_offset_back, R0, SEPTUM_PHI*FFA_CELL_LENGTH, SEPTUM_DR, 2*PI*SEPTUM_ROT, 0.);

// bump in HORIZONTAL PLANE produced by a vertical dipole field
h_bump_1: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=1.0, VAPERT=2.0, ANGLE=0.0, TP={ H_BUMP_1_FIELD },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(h_bump_1_offset, R0, H_BUMP_1_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_1_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_1_offset_back, R0, H_BUMP_1_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_1_DPHI, 0.);

h_bump_2: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=1.0, VAPERT=2.0, ANGLE=0.0, TP={ H_BUMP_2_FIELD },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(h_bump_2_offset, R0, H_BUMP_2_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_2_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_2_offset_back, R0, H_BUMP_2_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_2_DPHI, 0.);

h_bump_3: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=1.0, VAPERT=2.0, ANGLE=0.0, TP={ H_BUMP_3_FIELD },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(h_bump_3_offset, R0, H_BUMP_3_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_3_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_3_offset_back, R0, H_BUMP_3_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_3_DPHI, 0.);

h_bump_4: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=1.0, VAPERT=2.0, ANGLE=0.0, TP={ H_BUMP_4_FIELD },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(h_bump_4_offset, R0, H_BUMP_4_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_4_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_4_offset_back, R0, H_BUMP_4_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_4_DPHI, 0.);

h_bump_5: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=1.0, VAPERT=2.0, ANGLE=0.0, TP={ H_BUMP_5_FIELD },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(h_bump_5_offset, R0, H_BUMP_5_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_5_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_5_offset_back, R0, H_BUMP_5_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_5_DPHI, 0.);

// bump in VERTICAL PLANE produced by a horizontal dipole field
REAL V_BUMP_ROTATION=PI/2;
v_bump_1: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=2.0, VAPERT=1.0, ROTATION=V_BUMP_ROTATION, TP={ V_BUMP_1_FIELD },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(v_bump_1_offset, R0, V_BUMP_1_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_1_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_1_offset_back, R0, V_BUMP_1_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_1_DPHI, 0.);

v_bump_2: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=2.0, VAPERT=1.0, ROTATION=V_BUMP_ROTATION, TP={ V_BUMP_2_FIELD },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(v_bump_2_offset, R0, V_BUMP_2_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_2_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_2_offset_back, R0, V_BUMP_2_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_2_DPHI, 0.);

v_bump_3: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=2.0, VAPERT=1.0, ROTATION=V_BUMP_ROTATION, TP={ V_BUMP_3_FIELD },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(v_bump_3_offset, R0, V_BUMP_3_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_3_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_3_offset_back, R0, V_BUMP_3_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_3_DPHI, 0.);

v_bump_4: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=2.0, VAPERT=1.0, ROTATION=V_BUMP_ROTATION, TP={ V_BUMP_4_FIELD },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(v_bump_4_offset, R0, V_BUMP_4_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_4_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_4_offset_back, R0, V_BUMP_4_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_4_DPHI, 0.);

v_bump_5: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=2.0, VAPERT=1.0, ROTATION=V_BUMP_ROTATION, TP={ V_BUMP_5_FIELD },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(v_bump_5_offset, R0, V_BUMP_5_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_5_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_5_offset_back, R0, V_BUMP_5_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_5_DPHI, 0.);

IF (DO_BUMP_MAGNETS) {
    bump: Line = (FoilProbe,
                  Bump4Probe,
                  septum_offset, magnetSeptum, septum_offset_back,
                  h_bump_1_offset, h_bump_1, h_bump_1_offset_back,
                  h_bump_2_offset, h_bump_2, h_bump_2_offset_back,
                  h_bump_3_offset, h_bump_3, h_bump_3_offset_back,
                  h_bump_4_offset, h_bump_4, h_bump_4_offset_back,
                  h_bump_5_offset, h_bump_5, h_bump_5_offset_back,
                  v_bump_1_offset, v_bump_1, v_bump_1_offset_back,
                  v_bump_2_offset, v_bump_2, v_bump_2_offset_back,
                  v_bump_3_offset, v_bump_3, v_bump_3_offset_back,
                  v_bump_4_offset, v_bump_4, v_bump_4_offset_back,
                  v_bump_5_offset, v_bump_5, v_bump_5_offset_back,
                  null
                 );
    //bump: Line = (magnetSeptum);
} ELSE {
    bump: Line = (null);
}

////////////////// PROBES
REAL RING_PROBE_PHI_OFFSET=0.0;

REAL THIS_PROBE_PHI=0.0;
BUILD_PROBE(RingProbe01, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe02, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe03, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe04, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe05, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe06, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe07, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe08, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe09, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe10, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe11, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe12, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe13, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe14, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe15, THIS_PROBE_PHI);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);

ringprobe: Line = (RingProbe01, RingProbe02, RingProbe03, RingProbe04, RingProbe05, 
                   RingProbe06, RingProbe07, RingProbe08, RingProbe09, RingProbe10);

IF (DO_MAGNET_FIELD_MAPS) {
    DUMPEMFIELDS, COORDINATE_SYSTEM=CYLINDRICAL, FILE_NAME="FieldMapRPHI.dat",
        R_START=3.5, R_STEPS=361, DR=0.0025,
        PHI_START=-24.*DEGREE, PHI_STEPS=360.*4, DPHI=0.25*DEGREE,
        Z_START=0, Z_STEPS=1, DZ=0.100,
        T_START=0, T_STEPS=1, DT=1.;

    DUMPFIELDS, FILE_NAME="FieldMapXY.dat",
                X_START=MAP_C_X_MIN, X_STEPS=1001, DX=MAP_C_DX,
                Y_START=MAP_C_Y_MIN, Y_STEPS=1001, DY=MAP_C_DY,
                Z_START=0.0, Z_STEPS=1, DZ=1e-3;

    DUMPFIELDS, FILE_NAME="RingProbeMap.dat",
                X_START=RMIN, X_STEPS=1001, DX=(RMAX-RMIN)/1000,
                Y_START=0., Y_STEPS=1, DY=1e-3,
                Z_START=0, Z_STEPS=1, DZ=1e-3;
}

REAL BEAM_PHI_INIT_DEG=BEAM_PHI_INIT*FFA_CELL_LENGTH*360/2/PI;
ringdef: RINGDEFINITION, HARMONIC_NUMBER=1, LAT_RINIT=R0, LAT_PHIINIT=0,
         LAT_THETAINIT=0., BEAM_PHIINIT=BEAM_PHI_INIT_DEG, BEAM_PRINIT=0,
         BEAM_RINIT=0.0, SYMMETRY=1, RFFREQ=1, IS_CLOSED=false,
         MIN_R=0., MAX_R=10;
// magnet_d_placement_in, magnet_d_placement_out, 
cell: Line = (quarter_cell_drift, d_line, quarter_cell_drift, half_cell_rotate,
              quarter_cell_drift, f_line, quarter_cell_drift, half_cell_rotate);

// initial azimuthal placement
start: LOCAL_CARTESIAN_OFFSET,
            end_position_x=R0,
            end_position_y=R0,
            end_normal_x=0.,
            end_normal_y=-1.; 

l1: Line = (ringdef, ringprobe, start, bump, 
            segment, 
            cell, cell, cell, cell, cell,
            cell, cell, cell, cell, cell,
            null
           );

Dist1: DISTRIBUTION, TYPE=fromfile, FNAME="disttest.dat", INPUTMOUNITS=NONE;

Fs1:FIELDSOLVER, FSTYPE=None, MX=5, MY=5, MT=5,
                 PARFFTX=true, PARFFTY=false, PARFFTT=false,
                 BCFFTX=open, BCFFTY=open, BCFFTT=open,BBOXINCR=2;

//// STEP SIZE ////

REAL B_FREQ=1; // 1 MHz
REAL SPEED=C_LIGHT*(P0/(E0+P_MASS));
REAL STEP_SIZE_NS=STEP_SIZE/SPEED;
REAL STEPS_PER_TURN=1000/STEP_SIZE_NS/B_FREQ; // (this is really steps per B_FREQ)
REAL MAX_STEPS=2*PI*R0*N_TURNS/STEP_SIZE;

beam1: BEAM, PARTICLE=PROTON, pc=P0/1000., NPART=N_PARTICLES, BCURRENT=1, CHARGE=1.0, BFREQ=B_FREQ;

VALUE, VALUE={E0, P0, P_MASS};

TRACK, LINE=l1, BEAM=beam1, MAXSTEPS=MAX_STEPS, STEPSPERTURN=STEPS_PER_TURN;
RUN, METHOD="CYCLOTRON-T", BEAM=beam1, FIELDSOLVER=Fs1, DISTRIBUTION=Dist1, KEEPALIVE=True;
ENDTRACK;
STOP;

