Option, ECHO=TRUE;
//////////////////////////////////////////////////////////////////////////////
// Input file for single bunch tracking through VERTICAL FFA ring          //
//////////////////////////////////////////////////////////////////////////////
Title,string="Small ring using OPAL code";
Option, ASCIIDUMP=FALSE;
Option, ENABLEHDF5=__hdf5__;
OPTION, PSDUMPFREQ=100000;
Option, VERSION=10900;
Option, SPTDUMPFREQ=__spt_frequency__;
Option, STATDUMPFREQ=100000;

////////// CONSTANTS ////////////////////////////////////

// Note to self ... 
// * "Length" is total length of the sector magnet
// * each coil has centre length = Length/n * 0.8

REAL DEGREE=PI/180.;
REAL MM=1000.;
REAL C_LIGHT=0.3; // m/ns

////////// MODULES ///////////////////////
BOOL DO_MAGNET_FIELD_MAPS=__do_magnet_field_maps__;
BOOL DO_BUMP_MAGNETS=__do_bump__;

////////// RING  ///////////////
REAL R0=__radius__; // radius of cell start
REAL DRIFT_R0 = __drift_radius__;
REAL E0=__energy__;
REAL P_MASS=938.2720813;
REAL P_CHARGE=__beam_charge__;
REAL P0=((E0+P_MASS)^2-P_MASS^2)^0.5;
REAL N_CELLS=__n_cells__;
REAL RMIN=R0-1.0;
REAL RMAX=R0+1.0;
REAL FFA_CELL_LENGTH=2*PI/N_CELLS;
REAL RMID=R0*cos(180.0*degree/N_CELLS); // radius of cell middle

////////// TRACKING ///////////////
REAL STEP_SIZE=__step_size__; // m
REAL N_TURNS=__n_turns__;
REAL BEAM_PHI_INIT=__beam_phi_init__;
REAL N_PARTICLES=__n_particles__;
STRING STEPPER="__stepper__";
REAL OUTPUT_PLANE_TOLERANCE=__output_plane_tolerance__;

////////// MAIN MAGNETS/////////
REAL BF=__bf__;
STRING ENDFIELD="__end_field_model__";
REAL BF=__bf__;
REAL BF_OFFSET=__bf_offset__; // distance from centre line to BF A and BF B [m]
REAL BD=__bd__;
REAL BD_OFFSET=__bd_offset__;
REAL F_LENGTH=__f_length__; // total length of all coils including occupancy is F_LENGTH
REAL D_LENGTH=__d_length__;
REAL FD_GAP=__fd_gap__;
REAL DRIFT_LENGTH=__drift_length__;
REAL F_TILT_ANGLE=__f_tilt_angle__; // not implemented
REAL M_INDEX=__m_index__;
REAL F_END_LENGTH=__f_end_length__;
REAL D_END_LENGTH=__d_end_length__;
REAL MAX_HORIZONTAL_POWER=__max_x_power__;
REAL NEG_EXTENT=__neg_extent__;
REAL POS_EXTENT=__pos_extent__;
REAL BB_LENGTH=__bb_length__;
REAL MAG_WIDTH=__magnet_width__;
REAL BB_AZIMUTHAL=__bb_azimuthal__;

///////////// RF ///////////////////
BOOL DO_RF=__do_rf__; // boolean controls rf
REAL RF_PHI = __rf_phi__; // azimuthal position of rf [number of cells]
REAL RF_LENGTH = __rf_length__; // length of rf cavity [m]
REAL RF_END_FACTOR = __rf_end_factor__; // fractional length of RF fringe field
BOOL DO_RF_FRINGE_FIELD = __do_rf_fringe_field__; // set to true to simulate rf fringe field
REAL RF_END_LENGTH = RF_LENGTH*RF_END_FACTOR;
REAL RF_DR = DRIFT_R0-R0;
REAL RF_FRINGE_ORDER = __rf_fringe_order__;

VECTOR RF_TIME = __rf_time__;
VECTOR RF_FREQUENCY = __rf_frequency__;
VECTOR RF_EFIELD = __rf_efield__;
VECTOR RF_PHASE = __rf_phase__;

///////////// INJECTION SYSTEM ////////////////////
REAL BUMP_ORDER=__bump_order__;

REAL SEPTUM_LENGTH=__septum_length__; //0.15; // m
REAL SEPTUM_FRINGE_LENGTH=__septum_fringe__*SEPTUM_LENGTH; // 0.1// m
REAL SEPTUM_WIDTH=__septum_width__; // 0.5// m
REAL SEPTUM_FIELD=__septum_field__; // [T]
REAL SEPTUM_PHI=__septum_phi__; // fraction of cell length
REAL SEPTUM_DR=__septum_dr__; // radial position relative to R0
REAL SEPTUM_ROT=0.25; // rotation relative to azimuthal direction
REAL SEPTUM_ORDER=BUMP_ORDER;

// XXX_PHI is the azimuthal position of the centre
// XXX_DPHI is a tilt of the element relative to the centre
// XXX_DR is a radial offset of the element

REAL FOIL_PROBE_1_PHI=__foil_probe_1_phi__; // [fraction of cell length]
REAL FOIL_PROBE_1_DPHI=__foil_probe_1_dphi__; // RAD

REAL FOIL_PROBE_2_PHI=__foil_probe_2_phi__; // [fraction of cell length]
REAL FOIL_PROBE_2_DPHI=__foil_probe_2_dphi__; // RAD

BOOL DO_FOIL=__do_foil__;
REAL FOIL_PHI=__foil_phi__;
REAL FOIL_DPHI=__foil_dphi__;
REAL FOIL_MIN_Z=__foil_min_z__;
REAL FOIL_MAX_Z=__foil_max_z__;
REAL FOIL_INNER_RADIUS=__foil_inner_radius__;
REAL FOIL_OUTER_RADIUS=__foil_outer_radius__;
REAL FOIL_THICKNESS=__foil_thickness__;

REAL H_BUMP_LENGTH=__h_bump_length__;
REAL H_BUMP_FRINGE_LENGTH=__h_bump_fringe__;
REAL H_BUMP_ORDER=BUMP_ORDER;
REAL H_BUMP_DR=DRIFT_R0-R0;
REAL H_BUMP_HEIGHT=0.0;
REAL H_BUMP_WIDTH=0.0;
REAL H_BUMP_ELEVATION=0.0;

REAL H_BUMP_1_PHI=__h_bump_1_phi__;
REAL H_BUMP_1_DPHI=__h_bump_1_dphi__;
REAL H_BUMP_1_FIELD=__h_bump_1_field__;
VECTOR H_BUMP_1_SCALE = __h_bump_1_scales__;
VECTOR H_BUMP_1_TIMES = __h_bump_1_times__;
REAL H_BUMP_2_PHI=__h_bump_2_phi__;
REAL H_BUMP_2_DPHI=__h_bump_2_dphi__;
REAL H_BUMP_2_FIELD=__h_bump_2_field__;
VECTOR H_BUMP_2_SCALE = __h_bump_2_scales__;
VECTOR H_BUMP_2_TIMES = __h_bump_2_times__;
REAL H_BUMP_3_PHI=__h_bump_3_phi__;
REAL H_BUMP_3_DPHI=__h_bump_3_dphi__;
REAL H_BUMP_3_FIELD=__h_bump_3_field__;
VECTOR H_BUMP_3_SCALE = __h_bump_3_scales__;
VECTOR H_BUMP_3_TIMES = __h_bump_3_times__;
REAL H_BUMP_4_PHI=__h_bump_4_phi__;
REAL H_BUMP_4_DPHI=__h_bump_4_dphi__;
REAL H_BUMP_4_FIELD=__h_bump_4_field__;
VECTOR H_BUMP_4_SCALE = __h_bump_4_scales__;
VECTOR H_BUMP_4_TIMES = __h_bump_4_times__;
REAL H_BUMP_5_PHI=__h_bump_5_phi__;
REAL H_BUMP_5_DPHI=__h_bump_5_dphi__;
REAL H_BUMP_5_FIELD=__h_bump_5_field__;
VECTOR H_BUMP_5_SCALE = __h_bump_5_scales__;
VECTOR H_BUMP_5_TIMES = __h_bump_5_times__;

REAL V_BUMP_LENGTH=__v_bump_length__;
REAL V_BUMP_FRINGE_LENGTH=__v_bump_fringe__;
REAL V_BUMP_ORDER=BUMP_ORDER;
REAL V_BUMP_DR=DRIFT_R0-R0;
REAL V_BUMP_HEIGHT=0.0;
REAL V_BUMP_ELEVATION=0.0;

REAL V_BUMP_1_PHI=__v_bump_1_phi__;
REAL V_BUMP_1_DPHI=__v_bump_1_dphi__;
REAL V_BUMP_1_FIELD=__v_bump_1_field__;
VECTOR V_BUMP_1_SCALE = __v_bump_1_scales__;
VECTOR V_BUMP_1_TIMES = __v_bump_1_times__;
REAL V_BUMP_2_PHI=__v_bump_2_phi__;
REAL V_BUMP_2_DPHI=__v_bump_2_dphi__;
REAL V_BUMP_2_FIELD=__v_bump_2_field__;
VECTOR V_BUMP_2_SCALE = __v_bump_2_scales__;
VECTOR V_BUMP_2_TIMES = __v_bump_2_times__;
REAL V_BUMP_3_PHI=__v_bump_3_phi__;
REAL V_BUMP_3_DPHI=__v_bump_3_dphi__;
REAL V_BUMP_3_FIELD=__v_bump_3_field__;
VECTOR V_BUMP_3_SCALE = __v_bump_3_scales__;
VECTOR V_BUMP_3_TIMES = __v_bump_3_times__;
REAL V_BUMP_4_PHI=__v_bump_4_phi__;
REAL V_BUMP_4_DPHI=__v_bump_4_dphi__;
REAL V_BUMP_4_FIELD=__v_bump_4_field__;
VECTOR V_BUMP_4_SCALE = __v_bump_4_scales__;
VECTOR V_BUMP_4_TIMES = __v_bump_4_times__;
REAL V_BUMP_5_PHI=__v_bump_5_phi__;
REAL V_BUMP_5_DPHI=__v_bump_5_dphi__;
REAL V_BUMP_5_FIELD=__v_bump_5_field__;
VECTOR V_BUMP_5_SCALE = __v_bump_5_scales__;
VECTOR V_BUMP_5_TIMES = __v_bump_5_times__;

REAL QUAD_1_PHI=__quad_1_phi__;
REAL QUAD_1_DPHI=__quad_1_dphi__;
REAL QUAD_1_GRAD=__quad_1_grad__;
VECTOR QUAD_1_SCALE = __quad_1_scales__;
VECTOR QUAD_1_TIMES = __quad_1_times__;



//////////// FIELD MAPS ///////////////
REAL MAP_C_X_MIN=__cartesian_x_min__;
REAL MAP_C_DX=__cartesian_dx__; // 1001 steps
REAL MAP_C_Y_MIN=__cartesian_y_min__;
REAL MAP_C_DY=__cartesian_dy__; // 1001 steps

//////////// END VARIABLE DEFINITIONS //////////////////

//////////// MACROS AND GLOBALS /////////////
BUILD_PROBE(NAME, ANGLE, DANGLE): MACRO {
    //NAME: PROBE, xstart=RMIN*1000*cos(ANGLE),  xend=RMAX*1000*cos(ANGLE),
    //             ystart=RMIN*1000*sin(ANGLE),  yend=RMAX*1000*sin(ANGLE);
    NAME: OUTPUTPLANE, centre_x=R0*cos(ANGLE+1e-12), centre_y=R0*sin(ANGLE+1e-12), centre_z=0.,
                       normal_x=sin(ANGLE+DANGLE), normal_y=-cos(ANGLE+DANGLE), normal_z=0., width=1,
                       REFERENCE_ALIGNMENT_PARTICLE=-1, ALGORITHM="__output_algorithm__", 
                       TOLERANCE=OUTPUT_PLANE_TOLERANCE;
}

start: LOCAL_CARTESIAN_OFFSET,
                end_position_x=R0,
                end_position_y=R0,
                end_normal_x=-sin(360/40*degree),
                end_normal_y=-cos(360/40*degree); 

null: LOCAL_CARTESIAN_OFFSET,
                end_position_x=0., end_position_y=0.,
                end_normal_x=1.0, end_normal_y=0.;

//////////// MAIN MAGNETS /////////////////////
REAL F_CENTRE_LENGTH=F_LENGTH;
REAL D_CENTRE_LENGTH=D_LENGTH;
REAL BD=BD;
REAL BF=BF;

/////////// Transform from point P0 to start of magnet BB with given centre //////////
OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out): MACRO {
    x_out = delta_x-bb_length*cos(tilt)/2.;
}

OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out): MACRO {
    y_out = delta_y-bb_length*sin(tilt)/2.;
}

NORM_X(delta_x, delta_y, tilt, bb_length, tx_out): MACRO {
    tx_out = cos(tilt)/2.;
}

NORM_Y(delta_x, delta_y, tilt, bb_length, ty_out): MACRO {
    ty_out = sin(tilt)/2.;
}

MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out): MACRO {
    OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out);
    OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out);
    NORM_X  (delta_x, delta_y, tilt, bb_length, tx_out);
    NORM_Y  (delta_x, delta_y, tilt, bb_length, ty_out);
}

// cartesian offset, including a bounding box
BUILD_CENTRE_OFFSET(name, delta_x, delta_y, tilt, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;

    MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}


// place an element on the circle having radius R at azimuthal angle phi
// offset from the circle by delta r and then tilt by delta phi
BUILD_AZIMUTHAL_OFFSET(name, radius, phi, delta_r, delta_phi, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;
    //REAL cell_phi=2*PI/N_CELLS/2;

    // delta_x/y in the coordinate system of the ring
    REAL delta_x = radius*sin(phi)+delta_r*sin(phi);
    REAL delta_y = -radius*(1-cos(phi))+delta_r*cos(phi);

    MAGNET_OFFSET(delta_x, delta_y, -(phi+delta_phi), bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}


/////////// Transform from end of magnet BB back to the point P0 //////////

R_OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out): MACRO {
    x_out =-delta_y*sin(tilt)-delta_x*cos(tilt)-bb_length/2.;
}

R_OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out): MACRO {
    y_out = -delta_y*cos(tilt)+delta_x*sin(tilt);
}

R_NORM_X(delta_x, delta_y, tilt, bb_length, tx_out): MACRO {
    tx_out = cos(tilt)/2.;
}

R_NORM_Y(delta_x, delta_y, tilt, bb_length, ty_out): MACRO {
    ty_out = -sin(tilt)/2.
}

REVERSE_MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out): MACRO {
    R_OFFSET_X(delta_x, delta_y, tilt, bb_length, x_out);
    R_OFFSET_Y(delta_x, delta_y, tilt, bb_length, y_out);
    R_NORM_X  (delta_x, delta_y, tilt, bb_length, tx_out);
    R_NORM_Y  (delta_x, delta_y, tilt, bb_length, ty_out);
}

// cartesian offset, including a bounding box
// undoes a placement like BUILD_CENTRE_OFFSET; rectangular element
BUILD_CENTRE_REVERSE_OFFSET(name, delta_x, delta_y, tilt, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;

    REVERSE_MAGNET_OFFSET(delta_x, delta_y, tilt, bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}

// place an element on the circle having radius R at azimuthal angle phi
// offset from the circle by delta r and then tilt by delta phi
BUILD_AZIMUTHAL_REVERSE_OFFSET(name, radius, phi, delta_r, delta_phi, bb_length): MACRO {
    REAL x_out=0;
    REAL y_out=0;
    REAL tx_out=0;
    REAL ty_out=0;
    //REAL cell_phi=2*PI/N_CELLS/2;

    // delta_x/y in the coordinate system of the ring
    REAL delta_x = radius*sin(phi)+delta_r*sin(phi);
    REAL delta_y = -radius*(1-cos(phi))+delta_r*cos(phi);

    REVERSE_MAGNET_OFFSET(delta_x, delta_y, -(phi+delta_phi), bb_length, x_out, y_out, tx_out, ty_out);

    name: LOCAL_CARTESIAN_OFFSET,
            end_position_x=x_out,
            end_position_y=y_out,
            end_normal_x=tx_out,
            end_normal_y=ty_out;
}

//////////////////////// AZIMUTHAL MODE /////////////////////////////////

azimuthal_offset: LOCAL_CARTESIAN_OFFSET,
            end_position_x=0,
            end_position_y=0,
            end_normal_x=cos(FFA_CELL_LENGTH/2),
            end_normal_y=sin(FFA_CELL_LENGTH/2); 

segment_offset: LOCAL_CARTESIAN_OFFSET,
            end_position_x=0,
            end_position_y=0,
            end_normal_x=cos(FFA_CELL_LENGTH/2),
            end_normal_y=-sin(FFA_CELL_LENGTH/2);

azimuthal: Line = (azimuthal_offset);
segment: Line = (segment_offset);

///////////////////////// PLACEMENTS FOR MAGNET VD //////////////////////

REAL F_BB=BB_LENGTH;
REAL D_BB=BB_LENGTH;
REAL F1_POS=DRIFT_LENGTH/2.+F_LENGTH/2.;
REAL F2_POS=DRIFT_LENGTH/2.+F_LENGTH+FD_GAP+D_LENGTH+FD_GAP+F_LENGTH/2.;
REAL F_TILT=F_TILT_ANGLE*DEGREE;
REAL D_POS=DRIFT_LENGTH/2.+F_LENGTH+FD_GAP+D_LENGTH/2.;
REAL CELL_LENGTH=DRIFT_LENGTH/2.+F_LENGTH+FD_GAP+D_LENGTH+FD_GAP+F_LENGTH+DRIFT_LENGTH/2.;

// BUILD_CENTRE_OFFSET(name, delta_x, delta_y, tilt, bb_length)
BUILD_CENTRE_OFFSET(f1_offset, F1_POS, BF_OFFSET, F_TILT, F_BB);
BUILD_CENTRE_REVERSE_OFFSET(f1_offset_back, F1_POS, BF_OFFSET, F_TILT, F_BB);

BUILD_CENTRE_OFFSET(d_offset, D_POS, BD_OFFSET, 0, D_BB);
BUILD_CENTRE_REVERSE_OFFSET(d_offset_back, D_POS, BD_OFFSET, 0, D_BB);

BUILD_CENTRE_OFFSET(f2_offset, F2_POS, BF_OFFSET, -F_TILT, F_BB);
BUILD_CENTRE_REVERSE_OFFSET(f2_offset_back, F2_POS, BF_OFFSET, -F_TILT, F_BB);

BUILD_CENTRE_OFFSET(cell_offset, CELL_LENGTH, 0., -FFA_CELL_LENGTH, 0);
value, VALUE={CELL_LENGTH};

// magnetF BB
REAL BB_ANGLE=BB_AZIMUTHAL/2.0*degree;
REAL BB_X=CELL_LENGTH*sin(360/N_CELLS*degree);
REAL BB_Z0=BB_LENGTH/2.0-CELL_LENGTH*cos(360/N_CELLS*degree);
REAL BB_Z1=BB_LENGTH/2.0+CELL_LENGTH+CELL_LENGTH*cos(360/N_CELLS*degree);


// magnetF1 and magnetF2 have different azimuthal BB
magnetF1: VERTICALFFAMAGNET,
          END_FIELD_MODEL=__end_field_model__,
          B0=BF,
          FIELD_INDEX=M_INDEX,
          MAX_HORIZONTAL_POWER=MAX_HORIZONTAL_POWER,
          END_LENGTH=F_END_LENGTH,
          CENTRE_LENGTH=F_CENTRE_LENGTH,
          HEIGHT_NEG_EXTENT=NEG_EXTENT,
          HEIGHT_POS_EXTENT=POS_EXTENT,
          WIDTH=MAG_WIDTH,
          BB_LENGTH=BB_LENGTH,
          BB_START_POSITION={BB_X, 0.0, BB_Z0-F1_POS},
          BB_START_NORMAL= {-sin(BB_ANGLE), 0.0, cos(BB_ANGLE)},
          BB_END_POSITION={BB_X, 0.0, BB_Z1-F1_POS},
          BB_END_NORMAL= {sin(BB_ANGLE), 0.0, cos(BB_ANGLE)};

magnetF2: VERTICALFFAMAGNET,
          END_FIELD_MODEL=__end_field_model__,
          B0=BF,
          FIELD_INDEX=M_INDEX,
          MAX_HORIZONTAL_POWER=MAX_HORIZONTAL_POWER,
          END_LENGTH=F_END_LENGTH,
          CENTRE_LENGTH=F_CENTRE_LENGTH,
          HEIGHT_NEG_EXTENT=NEG_EXTENT,
          HEIGHT_POS_EXTENT=POS_EXTENT,
          WIDTH=MAG_WIDTH,
          BB_LENGTH=BB_LENGTH,
          BB_START_POSITION={BB_X, 0.0, BB_Z0-F2_POS},
          BB_START_NORMAL= {-sin(BB_ANGLE), 0.0, cos(BB_ANGLE)},
          BB_END_POSITION={BB_X, 0.0, BB_Z1-F2_POS},
          BB_END_NORMAL= {sin(BB_ANGLE), 0.0, cos(BB_ANGLE)};

magnetD: VERTICALFFAMAGNET,
          END_FIELD_MODEL=__end_field_model__,
          B0=BD,
          FIELD_INDEX=M_INDEX,
          MAX_HORIZONTAL_POWER=MAX_HORIZONTAL_POWER,
          END_LENGTH=D_END_LENGTH,
          CENTRE_LENGTH=D_CENTRE_LENGTH,
          HEIGHT_NEG_EXTENT=NEG_EXTENT,
          HEIGHT_POS_EXTENT=POS_EXTENT,
          WIDTH=MAG_WIDTH,
          BB_LENGTH=BB_LENGTH,
          BB_START_POSITION={BB_X, 0.0, BB_Z0-D_POS},
          BB_START_NORMAL= {-sin(BB_ANGLE), 0.0, cos(BB_ANGLE)},
          BB_END_POSITION={BB_X, 0.0, BB_Z1-D_POS},
          BB_END_NORMAL= {sin(BB_ANGLE), 0.0, cos(BB_ANGLE)};

///////////////////////////// TRIPLET CELL ///////////////////////////////

cell: Line = (f1_offset, magnetF1, f1_offset_back,
              d_offset, magnetD, d_offset_back,
              f2_offset, magnetF2, f2_offset_back,
              cell_offset);

empty_cell: Line = (cell_offset); // dummy cell

////////////////////////// RF CAVITY ///////////////////////////


rf_frequency_td: SPLINE_TIME_DEPENDENCE, ORDER=1.0, TIMES=RF_TIME, VALUES=RF_FREQUENCY;
rf_efield_td: SPLINE_TIME_DEPENDENCE, ORDER=1.0, TIMES=RF_TIME, VALUES=RF_EFIELD;
rf_phase_td: SPLINE_TIME_DEPENDENCE, ORDER=1.0, TIMES=RF_TIME, VALUES=RF_PHASE;

IF (DO_RF_FRINGE_FIELD) { 
    REAL RF_BB_LENGTH=RF_LENGTH*5;
    rf_cavity: VARIABLE_RF_CAVITY_FRINGE_FIELD, PHASE_MODEL="RF_PHASE_TD", AMPLITUDE_MODEL="RF_EFIELD_TD", 
               FREQUENCY_MODEL="RF_FREQUENCY_TD", HEIGHT=0.2, WIDTH=0.8, L=RF_BB_LENGTH,
               CENTRE_LENGTH=RF_LENGTH, END_LENGTH=RF_END_LENGTH, CAVITY_CENTRE=RF_BB_LENGTH/2, MAX_ORDER=RF_FRINGE_ORDER;
    BUILD_AZIMUTHAL_OFFSET(rf_offset, R0, RF_PHI*FFA_CELL_LENGTH, RF_DR, 0.0, RF_BB_LENGTH);
    BUILD_AZIMUTHAL_REVERSE_OFFSET(rf_offset_back, R0, RF_PHI*FFA_CELL_LENGTH, RF_DR, 0.0, RF_BB_LENGTH);
} ELSE {
    rf_cavity: VARIABLE_RF_CAVITY, PHASE_MODEL="RF_PHASE_TD", AMPLITUDE_MODEL="RF_EFIELD_TD", 
               FREQUENCY_MODEL="RF_FREQUENCY_TD", HEIGHT=0.10, WIDTH=0.8, L=RF_LENGTH;
    BUILD_AZIMUTHAL_OFFSET(rf_offset, R0, RF_PHI*FFA_CELL_LENGTH, RF_DR, 0.0, RF_LENGTH);
    BUILD_AZIMUTHAL_REVERSE_OFFSET(rf_offset_back, R0, RF_PHI*FFA_CELL_LENGTH, RF_DR, 0.0, RF_LENGTH);
}

REAL RF_ANGLE=PI/2.0;
move_up: LOCAL_CARTESIAN_OFFSET, end_position_z=0.3;
rf_tilt: LOCAL_CARTESIAN_OFFSET, end_rotation_x=RF_ANGLE;
rf_untilt: LOCAL_CARTESIAN_OFFSET, end_rotation_x=-RF_ANGLE;
move_down: LOCAL_CARTESIAN_OFFSET, end_position_z=-0.3;


IF (DO_RF) {
    rf: Line = (rf_offset, move_up, rf_tilt, rf_cavity, rf_untilt, move_down, rf_offset_back);
} ELSE {
    rf: Line = (null);
}

/////////////////////// BUMP /////////////////////////////////

BUILD_PROBE(FoilProbe_1, FOIL_PROBE_1_PHI*FFA_CELL_LENGTH, FOIL_PROBE_1_DPHI);
BUILD_PROBE(FoilProbe_2, FOIL_PROBE_2_PHI*FFA_CELL_LENGTH, FOIL_PROBE_2_DPHI);

magnetSeptum: MultipoleT, L=SEPTUM_LENGTH,
              RFRINGE=SEPTUM_FRINGE_LENGTH,
              LFRINGE=SEPTUM_FRINGE_LENGTH,
              HAPERT=SEPTUM_WIDTH,
              VAPERT=2.0,
              ANGLE=0.0,
              TP={ SEPTUM_FIELD },
              BBLENGTH=0.,
              MAXFORDER=SEPTUM_ORDER,
              MAXXORDER=SEPTUM_ORDER,
              VARRADIUS=FALSE;
BUILD_AZIMUTHAL_OFFSET(septum_offset, R0, SEPTUM_PHI*FFA_CELL_LENGTH, SEPTUM_DR, 2*PI*SEPTUM_ROT, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(septum_offset_back, R0, SEPTUM_PHI*FFA_CELL_LENGTH, SEPTUM_DR, 2*PI*SEPTUM_ROT, 0.);
REAL V_BUMP_ROTATION=PI/2;

H_BUMP_MAGNET(name, td_name, field, time_vec, scale_vec): MACRO {
  td_name: SPLINE_TIME_DEPENDENCE, ORDER=1.0, TIMES=time_vec, VALUES=scale_vec;
  name: MultipoleT,
    L=H_BUMP_LENGTH, RFRINGE=H_BUMP_FRINGE_LENGTH, LFRINGE=H_BUMP_FRINGE_LENGTH,
    HAPERT=4.0, VAPERT=4.0, ANGLE=0.0, TP={ field },
    BBLENGTH=0., MAXFORDER=H_BUMP_ORDER, MAXXORDER=H_BUMP_ORDER, VARRADIUS=FALSE,
    TIME_DEPENDENT_SCALING=td_name;
} 

V_BUMP_MAGNET(name, td_name, field, time_vec, scale_vec): MACRO {
  td_name: SPLINE_TIME_DEPENDENCE, ORDER=1, TIMES=time_vec, VALUES=scale_vec;
  name: MultipoleT,
    L=V_BUMP_LENGTH, RFRINGE=V_BUMP_FRINGE_LENGTH, LFRINGE=V_BUMP_FRINGE_LENGTH,
    HAPERT=4.0, VAPERT=4.0, ANGLE=0.0, TP={ field },
    BBLENGTH=0., MAXFORDER=V_BUMP_ORDER, MAXXORDER=V_BUMP_ORDER, VARRADIUS=FALSE,
    TIME_DEPENDENT_SCALING=td_name;
} 

// bump in HORIZONTAL PLANE produced by a vertical dipole field
H_BUMP_MAGNET(h_bump_1, h_bump_1_td, H_BUMP_1_FIELD, H_BUMP_1_TIMES, H_BUMP_1_SCALE);
BUILD_AZIMUTHAL_OFFSET(h_bump_1_offset, R0, H_BUMP_1_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_1_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_1_offset_back, R0, H_BUMP_1_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_1_DPHI, 0.);

H_BUMP_MAGNET(h_bump_2, h_bump_2_td, H_BUMP_2_FIELD, H_BUMP_2_TIMES, H_BUMP_2_SCALE);
BUILD_AZIMUTHAL_OFFSET(h_bump_2_offset, R0, H_BUMP_2_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_2_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_2_offset_back, R0, H_BUMP_2_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_2_DPHI, 0.);

H_BUMP_MAGNET(h_bump_3, h_bump_3_td, H_BUMP_3_FIELD, H_BUMP_3_TIMES, H_BUMP_3_SCALE);
BUILD_AZIMUTHAL_OFFSET(h_bump_3_offset, R0, H_BUMP_3_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_3_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_3_offset_back, R0, H_BUMP_3_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_3_DPHI, 0.);

H_BUMP_MAGNET(h_bump_4, h_bump_4_td, H_BUMP_4_FIELD, H_BUMP_4_TIMES, H_BUMP_4_SCALE);
BUILD_AZIMUTHAL_OFFSET(h_bump_4_offset, R0, H_BUMP_4_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_4_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_4_offset_back, R0, H_BUMP_4_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_4_DPHI, 0.);

H_BUMP_MAGNET(h_bump_5, h_bump_5_td, H_BUMP_5_FIELD, H_BUMP_5_TIMES, H_BUMP_5_SCALE);
BUILD_AZIMUTHAL_OFFSET(h_bump_5_offset, R0, H_BUMP_5_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_5_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(h_bump_5_offset_back, R0, H_BUMP_5_PHI*FFA_CELL_LENGTH, H_BUMP_DR, H_BUMP_5_DPHI, 0.);

// bump in VERTICAL PLANE produced by a horizontal dipole field
V_ROT: LOCAL_CARTESIAN_OFFSET, END_ROTATION_X=PI/2.0;
V_ROT_BACK: LOCAL_CARTESIAN_OFFSET, END_ROTATION_X=-PI/2.0;

V_BUMP_MAGNET(v_bump_1, v_bump_1_td, V_BUMP_1_FIELD, V_BUMP_1_TIMES, V_BUMP_1_SCALE);
BUILD_AZIMUTHAL_OFFSET(v_bump_1_offset, R0, V_BUMP_1_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_1_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_1_offset_back, R0, V_BUMP_1_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_1_DPHI, 0.);

V_BUMP_MAGNET(v_bump_2, v_bump_2_td, V_BUMP_2_FIELD, V_BUMP_2_TIMES, V_BUMP_2_SCALE);
BUILD_AZIMUTHAL_OFFSET(v_bump_2_offset, R0, V_BUMP_2_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_2_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_2_offset_back, R0, V_BUMP_2_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_2_DPHI, 0.);

V_BUMP_MAGNET(v_bump_3, v_bump_3_td, V_BUMP_3_FIELD, V_BUMP_3_TIMES, V_BUMP_3_SCALE);
BUILD_AZIMUTHAL_OFFSET(v_bump_3_offset, R0, V_BUMP_3_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_3_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_3_offset_back, R0, V_BUMP_3_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_3_DPHI, 0.);

V_BUMP_MAGNET(v_bump_4, v_bump_4_td, V_BUMP_4_FIELD, V_BUMP_4_TIMES, V_BUMP_4_SCALE);
BUILD_AZIMUTHAL_OFFSET(v_bump_4_offset, R0, V_BUMP_4_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_4_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_4_offset_back, R0, V_BUMP_4_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_4_DPHI, 0.);

V_BUMP_MAGNET(v_bump_5, v_bump_5_td, V_BUMP_5_FIELD, V_BUMP_5_TIMES, V_BUMP_5_SCALE);
BUILD_AZIMUTHAL_OFFSET(v_bump_5_offset, R0, V_BUMP_5_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_5_DPHI, 0.);
BUILD_AZIMUTHAL_REVERSE_OFFSET(v_bump_5_offset_back, R0, V_BUMP_5_PHI*FFA_CELL_LENGTH, V_BUMP_DR, V_BUMP_5_DPHI, 0.);


REAL FOIL_Z0=(FOIL_MAX_Z+FOIL_MIN_Z)/2;
REAL FOIL_DZ=(FOIL_MAX_Z-FOIL_MIN_Z);
REAL FOIL_R0=(FOIL_OUTER_RADIUS+FOIL_INNER_RADIUS)/2; // foil centre radius
REAL FOIL_DR=FOIL_OUTER_RADIUS-FOIL_INNER_RADIUS;
REAL FOIL_PREPHI=FOIL_PHI*FFA_CELL_LENGTH-4*PI*STEP_SIZE/FOIL_R0; // position 2 steps before the foil [RAD]
REAL FOIL_POSTPHI=FOIL_PHI*FFA_CELL_LENGTH+4*PI*STEP_SIZE/R0; // position 2 steps after the foil [RAD]

REAL FOIL_X0=FOIL_R0*cos(FOIL_PHI*FFA_CELL_LENGTH)+(FOIL_INNER_RADIUS-FOIL_R0)*cos((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH);
REAL FOIL_Y0=FOIL_R0*sin(FOIL_PHI*FFA_CELL_LENGTH)+(FOIL_INNER_RADIUS-FOIL_R0)*sin((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH);
REAL FOIL_X1=FOIL_R0*cos(FOIL_PHI*FFA_CELL_LENGTH)+(FOIL_OUTER_RADIUS-FOIL_R0)*cos((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH);
REAL FOIL_Y1=FOIL_R0*sin(FOIL_PHI*FFA_CELL_LENGTH)+(FOIL_OUTER_RADIUS-FOIL_R0)*sin((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH);

PREFOILPROBE: OUTPUTPLANE, centre_x=FOIL_R0*cos(FOIL_PREPHI), centre_y=FOIL_R0*sin(FOIL_PREPHI), centre_z=0.0,
                       normal_x=sin((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_y=-cos((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_z=0., width=1,
                       REFERENCE_ALIGNMENT_PARTICLE=-1, ALGORITHM="__output_algorithm__", 
                       TOLERANCE=OUTPUT_PLANE_TOLERANCE;

//FOIL_PHYSICS: PARTICLEMATTERINTERACTION, TYPE=SCATTERING, MATERIAL="Graphite";
//FOIL: CCollimator, XSTART=FOIL_X0*MM, XEND=FOIL_X1*MM,
//                   YSTART=FOIL_Y0*MM, YEND=FOIL_Y1*MM,
//                   ZSTART=FOIL_MIN_Z*MM, ZEND=FOIL_MAX_Z*MM,
//                   WIDTH=FOIL_THICKNESS, PARTICLEMATTERINTERACTION=FOIL_PHYSICS;
FOIL: OUTPUTPLANE, centre_x=FOIL_R0*cos(FOIL_PHI*FFA_CELL_LENGTH), centre_y=FOIL_R0*sin(FOIL_PHI*FFA_CELL_LENGTH), centre_z=FOIL_Z0,
                       normal_x=sin((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_y=-cos((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_z=0., width=FOIL_DR, height=FOIL_DZ,
                       REFERENCE_ALIGNMENT_PARTICLE=-1, ALGORITHM="__output_algorithm__", 
                       TOLERANCE=OUTPUT_PLANE_TOLERANCE,
                       MATERIAL="Graphite", MATERIAL_THICKNESS=FOIL_THICKNESS;



POSTFOILPROBE: OUTPUTPLANE, centre_x=FOIL_R0*cos(FOIL_POSTPHI), centre_y=FOIL_R0*sin(FOIL_POSTPHI), centre_z=0.,
                       normal_x=sin((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_y=-cos((FOIL_PHI+FOIL_DPHI)*FFA_CELL_LENGTH),
                       normal_z=0., width=1,
                       REFERENCE_ALIGNMENT_PARTICLE=-1, ALGORITHM="__output_algorithm__", 
                       TOLERANCE=OUTPUT_PLANE_TOLERANCE;

IF (DO_FOIL) {
    foil_line: Line = (PreFoilProbe, Foil, PostFoilProbe);
} ELSE {
    foil_line: Line = (null);
}

IF (DO_BUMP_MAGNETS) {
    bump: Line = (FoilProbe_1, FoilProbe_2,
                  septum_offset, magnetSeptum, septum_offset_back,
                  h_bump_1_offset, h_bump_1, h_bump_1_offset_back,
                  h_bump_2_offset, h_bump_2, h_bump_2_offset_back,
                  h_bump_3_offset, h_bump_3, h_bump_3_offset_back,
                  h_bump_4_offset, h_bump_4, h_bump_4_offset_back,
                  h_bump_5_offset, h_bump_5, h_bump_5_offset_back,
                  v_bump_1_offset, v_rot, v_bump_1, v_rot_back, v_bump_1_offset_back,
                  v_bump_2_offset, v_rot, v_bump_2, v_rot_back, v_bump_2_offset_back,
                  v_bump_3_offset, v_rot, v_bump_3, v_rot_back, v_bump_3_offset_back,
                  v_bump_4_offset, v_rot, v_bump_4, v_rot_back, v_bump_4_offset_back,
                  v_bump_5_offset, v_rot, v_bump_5, v_rot_back, v_bump_5_offset_back,
                  null
                 );
} ELSE {
    bump: Line = (null);
}

////////////////// PROBES
REAL RING_PROBE_PHI_OFFSET=0.0;

REAL THIS_PROBE_PHI=0.0;
BUILD_PROBE(RingProbe01, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe02, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe03, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe04, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe05, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe06, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe07, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe08, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe09, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe10, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe11, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe12, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe13, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe14, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingProbe15, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);

REAL THIS_PROBE_PHI=FFA_CELL_LENGTH/2.;
BUILD_PROBE(RingHalfProbe01, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe02, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe03, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe04, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe05, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe06, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe07, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe08, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe09, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe10, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe11, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe12, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe13, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe14, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);
BUILD_PROBE(RingHalfProbe15, THIS_PROBE_PHI, 0);
THIS_PROBE_PHI = EVAL(THIS_PROBE_PHI+FFA_CELL_LENGTH);

ringprobe: Line = (RingProbe01, RingProbe02, RingProbe03, RingProbe04, RingProbe05, 
                   RingProbe06, RingProbe07, RingProbe08, RingProbe09, RingProbe10);

ringhalfprobe: Line = (RingHalfProbe01, RingHalfProbe02, RingHalfProbe03, RingHalfProbe04, RingHalfProbe05, 
                       RingHalfProbe06, RingHalfProbe07, RingHalfProbe08, RingHalfProbe09, RingHalfProbe10);

IF (DO_MAGNET_FIELD_MAPS) {
    DUMPEMFIELDS, COORDINATE_SYSTEM=CYLINDRICAL, FILE_NAME="FieldMapRPHI.dat",
        R_START=3.5, R_STEPS=361, DR=0.0025,
        PHI_START=-24.*DEGREE, PHI_STEPS=360.*4, DPHI=0.25*DEGREE,
        Z_START=0, Z_STEPS=1, DZ=0.100,
        T_START=0, T_STEPS=1, DT=1.;

    DUMPFIELDS, FILE_NAME="FieldMapXY.dat",
                X_START=MAP_C_X_MIN, X_STEPS=1001, DX=MAP_C_DX,
                Y_START=MAP_C_Y_MIN, Y_STEPS=1001, DY=MAP_C_DY,
                Z_START=0.0, Z_STEPS=1, DZ=1e-3;

    DUMPFIELDS, FILE_NAME="RingProbeMap.dat",
                X_START=RMIN, X_STEPS=1001, DX=(RMAX-RMIN)/1000,
                Y_START=0., Y_STEPS=1, DY=1e-3,
                Z_START=0, Z_STEPS=1, DZ=1e-3;
}

REAL BEAM_PHI_INIT_DEG=BEAM_PHI_INIT*FFA_CELL_LENGTH*360/2/PI;
ringdef: RINGDEFINITION, HARMONIC_NUMBER=1, LAT_RINIT=R0, LAT_PHIINIT=0,
         LAT_THETAINIT=0., BEAM_PHIINIT=BEAM_PHI_INIT_DEG, BEAM_PRINIT=0,
         BEAM_RINIT=0.0, SYMMETRY=1, RFFREQ=1, IS_CLOSED=false,
         MIN_R=0., MAX_R=R0+MAG_WIDTH;

// initial azimuthal placement
start: LOCAL_CARTESIAN_OFFSET,
            end_position_x=R0,
            end_position_y=R0,
            end_normal_x=0.,
            end_normal_y=-1.; 

IF (N_CELLS == 10) {
    l1: Line = (ringdef, ringprobe, ringhalfprobe, start, bump, rf, foil_line,
                segment, 
                cell, cell, cell, cell, cell, 
                cell, cell, cell, cell, cell, 
                null
               );
}

IF (N_CELLS == 20) {
    l1: Line = (ringdef, ringprobe, ringhalfprobe, start, bump, rf, foil_line,
                segment, 
                cell, cell, cell, cell, cell, 
                cell, cell, cell, cell, cell, 
                cell, cell, cell, cell, cell, 
                cell, cell, cell, cell, cell, 
                null
               );
}

Fs1:FIELDSOLVER, FSTYPE=None, MX=5, MY=5, MT=5,
                 PARFFTX=true, PARFFTY=false, PARFFTT=false,
                 BCFFTX=open, BCFFTY=open, BCFFTT=open,BBOXINCR=2;

//// STEP SIZE ////

REAL B_FREQ=1; // 1 MHz
REAL SPEED=C_LIGHT*(P0/(E0+P_MASS));
REAL STEP_SIZE_NS=STEP_SIZE/SPEED;
REAL STEPS_PER_TURN=1000/STEP_SIZE_NS/B_FREQ; // (this is really steps per B_FREQ)
REAL MAX_STEPS=2*PI*R0*N_TURNS/STEP_SIZE;

beam1: BEAM, MASS=P_MASS/1000, CHARGE=P_CHARGE, pc=P0/1000., NPART=N_PARTICLES, BCURRENT=1, BFREQ=B_FREQ;

VALUE, VALUE={E0, P0, P_MASS};

// Dist1: DISTRIBUTION, TYPE=fromfile, FNAME="disttest.dat", INPUTMOUNITS=NONE;
Dist1: DISTRIBUTION, TYPE=fromfile, FNAME="disttest.dat", INPUTMOUNITS=NONE, EMITTED=TRUE, EMISSIONSTEPS=MAX_STEPS, NBIN=N_PARTICLES;
TRACK, LINE=l1, BEAM=beam1, MAXSTEPS=MAX_STEPS, STEPSPERTURN=STEPS_PER_TURN, TIMEINTEGRATOR="__stepper__";
RUN, METHOD="CYCLOTRON-T", BEAM=beam1, FIELDSOLVER=Fs1, DISTRIBUTION=Dist1, KEEPALIVE=True;
ENDTRACK;
STOP;

